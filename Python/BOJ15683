import sys
import copy
input = sys.stdin.readline


def fifth_camera_setting(cur_row, cur_col, direction):
    if direction in (1, 2, 3, 4):
        first_camera_setting(cur_row, cur_col, 1)
        first_camera_setting(cur_row, cur_col, 2)
        first_camera_setting(cur_row, cur_col, 3)
        first_camera_setting(cur_row, cur_col, 4)


def fourth_camera_setting(cur_row, cur_col, direction):
    if direction == 1:
        first_camera_setting(cur_row, cur_col, 1)
        first_camera_setting(cur_row, cur_col, 2)
        first_camera_setting(cur_row, cur_col, 4)
    elif direction == 2:
        first_camera_setting(cur_row, cur_col, 1)
        first_camera_setting(cur_row, cur_col, 2)
        first_camera_setting(cur_row, cur_col, 3)
    elif direction == 3:
        first_camera_setting(cur_row, cur_col, 2)
        first_camera_setting(cur_row, cur_col, 3)
        first_camera_setting(cur_row, cur_col, 4)
    else:
        first_camera_setting(cur_row, cur_col, 1)
        first_camera_setting(cur_row, cur_col, 3)
        first_camera_setting(cur_row, cur_col, 4)


def third_camera_setting(cur_row, cur_col, direction):
    if direction == 1:
        first_camera_setting(cur_row, cur_col, 1)
        first_camera_setting(cur_row, cur_col, 2)
    elif direction == 2:
        first_camera_setting(cur_row, cur_col, 2)
        first_camera_setting(cur_row, cur_col, 3)
    elif direction == 3:
        first_camera_setting(cur_row, cur_col, 3)
        first_camera_setting(cur_row, cur_col, 4)
    else:
        first_camera_setting(cur_row, cur_col, 4)
        first_camera_setting(cur_row, cur_col, 1)


def first_camera_setting(cur_row, cur_col, direction):
    if direction == 1:
        for i in range(cur_row-1, -1, -1):
            if board[i][cur_col] == 0:
                board[i][cur_col] = '#'
            elif board[i][cur_col] == 6:
                break
    elif direction == 2:
        for i in range(cur_col+1, M):
            if board[cur_row][i] == 0:
                board[cur_row][i] = '#'
            elif board[cur_row][i] == 6:
                break
    elif direction == 3:
        for i in range(cur_row+1, N):
            if board[i][cur_col] == 0:
                board[i][cur_col] = '#'
            elif board[i][cur_col] == 6:
                break
    else:
        for i in range(cur_col-1, -1, -1):
            if board[cur_row][i] == 0:
                board[cur_row][i] = '#'
            elif board[cur_row][i] == 6:
                break


def second_camera_setting(cur_row, cur_col, direction):
    if direction == 1 or direction == 3:
        first_camera_setting(cur_row, cur_col, 1)
        first_camera_setting(cur_row, cur_col, 3)
    elif direction == 2 or direction == 4:
        first_camera_setting(cur_row, cur_col, 2)
        first_camera_setting(cur_row, cur_col, 4)


def camera_setting():
    for idx, camera in enumerate(cameras):
        cur_row, cur_col, camera_info = camera
        if camera_info == 1:
            first_camera_setting(cur_row, cur_col, camera_direction_info[idx])
        elif camera_info == 2:
            second_camera_setting(cur_row, cur_col, camera_direction_info[idx])
        elif camera_info == 3:
            third_camera_setting(cur_row, cur_col, camera_direction_info[idx])
        elif camera_info == 4:
            fourth_camera_setting(cur_row, cur_col, camera_direction_info[idx])
        else:
            fifth_camera_setting(cur_row, cur_col, camera_direction_info[idx])


def DFS(L):
    global board, ans
    if L == len(cameras):
        origin = copy.deepcopy(board)
        camera_setting()
        temp = 0
        for i in range(N):
            for j in range(M):
                if board[i][j] == 0:
                    temp += 1
        ans = min(ans, temp)
        board = copy.deepcopy(origin)
    else:
        for i in range(1, 5):
            camera_direction_info[L] = i
            DFS(L+1)


if __name__ == "__main__":
    N, M = map(int, input().split())
    board = [list(map(int, input().split())) for _ in range(N)]
    cameras = []
    for i in range(N):
        for j in range(M):
            if board[i][j] in (1, 2, 3, 4, 5):
                cameras.append((i, j, board[i][j]))
    camera_direction_info = [0] * len(cameras)
    ans = 2147000000
    DFS(0)
    print(ans)
