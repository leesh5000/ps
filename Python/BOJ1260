import java.io.*;
import java.util.*;

public class BJ1260 {

    private static int n, m, v;
    private static ArrayList<Integer>[] graph;
    private static int[] check;
    private static StringBuilder sb = new StringBuilder();


    public static void main(String[] args) throws FileNotFoundException, IOException {

        System.out.println(System.getProperty("user.dir"));
        System.setIn(new FileInputStream("./src/input.txt"));
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        v = Integer.parseInt(st.nextToken());

        graph = new ArrayList[n + 1];

        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Integer>();
        }

        for (int i = 0; i < m; i++) {
            st = new StringTokenizer(br.readLine());
            int u = Integer.parseInt(st.nextToken());
            int v = Integer.parseInt(st.nextToken());
            graph[u].add(v);
            graph[v].add(u);
        }

        for (int i=0; i< graph.length; i++) {
            Collections.sort(graph[i]);
        }

        check = new int[n + 1];
        DFS(v);
        sb.append("\n");
        Arrays.fill(check, 0);
        BFS(v);
        System.out.println(sb.toString());
    }

    public static void DFS(int v) {
        check[v] = 1;
        sb.append(Integer.toString(v)).append(" ");
        for (int next : graph[v]) {
            if (check[next] == 0) {
                DFS(next);
            }
        }
    }

    private static void BFS(int v) {
        Queue<Integer> q = new LinkedList<Integer>();
        q.add(v);
        check[v] = 1;
        while (!q.isEmpty()) {
            int cur = q.remove();
            sb.append(Integer.toString(cur)).append(" ");
            for (int next : graph[cur]) {
                if (check[next]==0) {
                    check[next] = 1;
                    q.add(next);
                }
            }
        }
    }
}
